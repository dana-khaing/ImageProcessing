(* Reduction.art - project starter for image processing *)

!configuration -> _sig:__map

(* Term rewrite rules *)
-assign  _n |> __int32(_)    --- assign(_X,_n),_sig -> __done,__put(_sig,_X,_n)
-assignR _E,_sig -> _I,_sigP --- assign(_X,_E),_sig -> assign(_X,_I),_sigP

-deref --- deref(_R),_sig -> __get(_sig,_R),_sig

-sequenceDone                    --- seq(__done, _C),_sig -> _C,_sig
-sequence _C1,_sig -> _C1P,_sigP --- seq(_C1,_C2),_sig -> seq(_C1P,_C2),_sigP

-ifTrue                        --- if(true,_C1,_C2),_sig -> _C1,_sig
-ifFalse                       --- if(false,_C1,_C2),_sig -> _C2,_sig
-ifResolve _E,_sig ->_EP,_sigP --- if(_E,_C1,_C2),_sig -> if(_EP,_C1,_C2),_sigP

-while --- while(_E,_C),_sig -> if(_E,seq(_C,while(_E,_C)),__done),_sig

-eq  _n1 |> __int32(_) _n2 |> __int32(_)      --- eq(_n1,_n2),_sig  -> __eq(_n1,_n2),_sig
-eqR _n |> __int32(_)  _E2,_sig -> _I2,_sigP  --- eq(_n,_E2) ,_sig  -> eq(_n,_I2),_sigP
-eqL _E1,_sig -> _I1,_sigP                    --- eq(_E1,_E2),_sig  -> eq(_I1,_E2),_sigP

-ne  _n1 |> __int32(_) _n2 |> __int32(_)      --- ne(_n1,_n2),_sig  -> __ne(_n1,_n2),_sig
-neR _n |> __int32(_)  _E2,_sig -> _I2,_sigP  --- ne(_n,_E2) ,_sig  -> ne(_n,_I2),_sigP
-neL _E1,_sig -> _I1,_sigP                    --- ne(_E1,_E2),_sig  -> ne(_I1,_E2),_sigP

-gt  _n1 |> __int32(_)  _n2 |> __int32(_)     --- gt(_n1,_n2),_sig  ->  __gt(_n1,_n2),_sig 
-gtR _n |> __int32(_)  _E2,_sig -> _I2,_sigP  --- gt(_n,_E2),_sig   -> gt(_n,_I2),_sigP
-gtL _E1,_sig -> _I1,_sigP                    --- gt(_E1,_E2),_sig  -> gt(_I1,_E2),_sigP

-lt  _n1 |> __int32(_)  _n2 |> __int32(_)     --- lt(_n1,_n2),_sig  ->  __lt(_n1,_n2),_sig 
-ltR _n |> __int32(_)  _E2,_sig -> _I2,_sigP  --- lt(_n,_E2),_sig   -> lt(_n,_I2),_sigP
-ltL _E1,_sig -> _I1,_sigP                    --- lt(_E1,_E2),_sig  -> lt(_I1,_E2),_sigP

-add  _n1 |> __int32(_) _n2 |> __int32(_)     --- add(_n1,_n2),_sig -> __add(_n1,_n2),_sig
-addR _n |> __int32(_) _E2,_sig -> _I2,_sigP  --- add(_n,_E2),_sig  -> add(_n,_I2),_sigP
-addL _E1,_sig -> _I1,_sigP                   --- add(_E1,_E2),_sig -> add(_I1,_E2),_sigP

-sub  _n1 |> __int32(_) _n2 |> __int32(_)     --- sub(_n1,_n2),_sig -> __sub(_n1,_n2),_sig
-subR _n |> __int32(_) _E2,_sig -> _I2,_sigP  --- sub(_n,_E2),_sig  -> sub(_n,_I2),_sigP
-subL _E1,_sig -> _I1,_sigP                   --- sub(_E1,_E2),_sig -> sub(_I1,_E2),_sigP


-plugin --- plugin(_O),_sig -> __plugin(_O),_sig
-plugin --- plugin(_O, _X),_sig -> __plugin(_O, _X),_sig
-plugin --- plugin(_O, _X, _Y),_sig -> __plugin(_O, _X, _Y),_sig
-plugin --- plugin(_O, _X, _Y, _Z),_sig -> __plugin(_O, _X, _Y, _Z),_sig

-load   --- load(_X),_sig -> __plugin("load", _X),_sig
-invert --- invert,_sig -> __plugin("invert"),_sig
-flip --- flip(_X),_sig -> __plugin("flip",_X),_sig
-brightness --- brightness(_X),_sig -> __plugin("brightness",_X),_sig



(*  CFG rules *)
seq ::= statement^^ | statement seq 
statement ::= assign^^ | while^^ | if^^ | plugin^^ ';'^ | load^^ ';'^ | invert^^ ';'^
assign ::= &ID ':='^ expression ';'^
while ::= 'while'^ expression 'do'^ statement
if ::= 'if'^ expression 'then'^ statement | 'if'^ expression 'then'^ statement 'else'^ statement
plugin ::= 'plugin'^ '('^ expressions^ ')'^  

load ::= 'load'^ __string
invert ::= 'invert'^
flip ::= 'flip'^ __string
brightness ::= 'brightness'^ __real64

expressions ::= expression | expression ','^ expressions^
expression ::= rels^^
rels ::= adds^^ | gt^^ | ne^^ | eq^^ | lt^^
  gt ::= adds '>'^ adds
  lt ::= adds '<'^ adds
  ne ::= adds '!='^ adds 
  eq ::= adds '='^ adds
adds  ::= operand^^ | sub^^ | add^^
  add ::= adds '+'^ operand
  sub ::= adds '-'^ operand

operand ::= __int32^^ | deref^^ | __string^^ | plugin^^ | __real64^^
__int32 ::= &INTEGER
deref   ::= &ID
__string::= &STRING_SQ
__real64 ::= &REAL





(*Operation Test*)
//!try seq(assign(a,6), seq(assign(b,9), while(ne(deref(a), deref(b)), if(gt(deref(a), deref(b)), assign(a, sub(deref(a), deref(b))), assign(b, sub(deref(b), deref(a))))))), __map
!try "a := 6; b := 9; while a != b do if a > b then a := a - b; else b := b - a;"
//!try "a := 6; b := 6; if a = b then a := a + b; else b := b - a;"

(* Plugin test *)
//!try "plugin('init');"
//!try "plugin('init'); plugin('load', 'GERTank.PNG');"
//!try "plugin('init'); plugin('load', 'GERTank.PNG'); plugin('invert');"
//!try "plugin('init'); plugin('load', 'GERTank.PNG'); plugin('flip','vertical');"
// !try "plugin('init'); plugin('load', 'mountain.jpg'); plugin('invert');"
//!try "plugin('init'); load 'mountain.jpg'; invert;"

(*Brightness*)
//!try "plugin('init'); plugin('load', 'GERTank.PNG'); plugin('brightness',0.4);"
//!try "plugin('init'); plugin('load', 'mountain.jpg'); plugin('brightness',4.0);"